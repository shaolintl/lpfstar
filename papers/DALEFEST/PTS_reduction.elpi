type whd* term -> term -> prop.
type whd1 term -> term -> prop.

whd1 (app M N) R :- whd* M (lam _ F), R = F N.
whd* A B :- whd1 A A1, !, whd* A1 B.
whd* X X.

type match_sort term -> @univ -> prop.
match_sort T I :- whd* T (sort I).

type match_arr term -> term -> (term -> term) -> prop.
match_arr T A F :- whd* T (arr A F).

type conv term -> term -> prop.
type sub term -> term -> prop.

conv T1 T2 :- comp T1 eq T2.  % T1 = T2 up to beta-reduction
sub  T1 T2 :- comp T1 leq T2. % T1 subtype of T2 up to beta-reduction

type comp term -> eq_or_leq -> term -> prop.

% fast path + axiom rules
comp X _ X :- !.
comp (sort I) leq (sort J) :- lt I J.
% congruence rules
comp (app M1 N1) _ (app M2 N2) :- conv M1 M2, conv N1 N2.
comp (lam A1 F1) _ (lam A2 F2) :- conv A1 A2, pi x\ conv (F1 x) (F2 x).
comp (arr A1 F1) D (arr A2 F2) :- conv A1 A2, pi x\ comp (F1 x) D (F2 x).
% reduction rules
comp A D B :- whd1 A A1, comp A1 D B.
comp A D B :- whd1 B B1, comp A D B1.
