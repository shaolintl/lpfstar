% vim:set ft=lprolog:

kind term type.
type app term -> term -> term.
type lam term -> (term -> term) -> term.

type of term -> term -> prop.
type arr term -> (term -> term) -> term.

of (app M N) BN :-
  of M TM, conv TM (arr A1 Bx), of N A2, sub A2 A1, BN = Bx N.
of (lam A F) (arr A B) :-
  of A SA, conv SA (sort _),
  (pi x\ of x A => of (F x) (B x)),
  of (arr A B) _. % can't put this early, since B flexible

type sort int -> term.

of (sort I) (sort J) :- succ I J.
of (arr A Bx) (sort K) :-
  of A TA, (pi x\ of x A => of (Bx x) TB),
  conv TA (sort I), conv TB (sort J), max I J K.
