% PTS extension with inductive typres and recursivefunctions
% accumulate after PTS_machine.elpi, and before PTS_global.elpi

% match V A W U: match V with constructors of ind. type W, and select branch in A of type U
type match term -> stack -> term -> term -> term.

% match_trame A W U P: stack frame for match 
type match_trame stack -> term -> term -> stack -> stack.

% HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Whd followed by continuation and machine unwinding.
type whd_continue_unwind term -> (term -> stack -> term -> stack -> prop) -> term -> prop.
whd_continue_unwind N K NF :-
 whd* N [] (l \ t1 \ s1 \ sigma TS \ K t1 s1 t2 s2, unwind_stack s2 t2 TS, put_abbr l TS NF).

% REDUCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type get_branch int -> stack -> term -> stack -> stack -> prop.
/* stack, constructor => branch, rear stack, front stack */ 
get_branch (match_trame A _ _ P) J T P [] :- nth A J T.
get_branch [V|P] J T P1 [V|P2] :- get_branch P J T P1 P2.

% wind for match
whd1 (match V A W U) P C :- C [] V (match_trame A W U P).

% iota for match
% note: the left arguments must be removed
whd1 T1 P1 C :- is_constructor T1 J K, !,
                get_branch P1 J T2 P A, split A K SN DX, append DX P P2,
                C [] T2 P2.

% unwind for match
unwind_stack (match_trame A W U P) V1 (match V2 A W U) :- unwind_stack P V1 V2.

% GLOBAL DELTA EXPANSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

check_constructor V P V P :- is_constructor V _ _.

unwind_whd_to_constructor V1 V2 :- whd_continue_unwind V1 check_constructor V2.

% check constructor before expanding fixpoint
expand T1 P1 P2 :- is_fixpoint T1 L, !,
                   subst P1 L unwind_whd_to_constructor P2.

% TYPING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mk_out_type V W0 U0 W0 P U0 DXV :-
 is_inductive W0 K, split P K SN DX, append DX [V] DXV.

% not complete, we just compute the output type ...
of (match V A W0 U0) U :- !, of V W, whd_continue_unwind W (mk_out_type V W0 U0) U.

% DO WE NEED THEESE EXTENSIONS? %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% append (match_trame A W U P1) P2 (match_trame A W U P) :- append P1 P2 P.

% forall2 (match_trame A1 W U1 P1) (match_trame A2 W U2 P2) F :-
%  forall2 A1 A2 F, F U1 U2, forall2 P1 P2 F.
