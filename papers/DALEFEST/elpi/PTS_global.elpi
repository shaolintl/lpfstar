% PTS extension with global definitions/declarations for PTS_machine
% accumulate after PTS_machine.elpi

type env term -> int -> term -> prop. /* name, height, definiens */

% note: reductions (call-by-need?) in this predicate, *not* in env
% note: only reductions on the stack for now
type expand term -> stack -> stack -> prop. /* name, old stack, new stack */

% EXPAND %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% base case (the stack does not change)
expand _ P P.

% left delta
expand_sn T1 U1 P1 M T2 P2 :- expand T1 P1 Q1, comp U1 Q1 M T2 P2.

% right delta
expand_dx T1 P1 M T2 U2 P2 :- expand T2 P2 Q2, comp T1 P1 M U2 Q2.

% FORCED DELTA (COMP) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% parallel delta.
% comp T P1 M T P2 :- env T _ U, !,
%                     expand T P1 Q1, expand T P2 Q2, comp U Q1 M U Q2.

% candidate left delta.
comp T1 P1 M T2 P2 :- env T1 H1 U1, !, check_rhs T1 P1 H1 U1 M T2 P2.

% forced right delta.
comp T1 P1 M T2 P2 :- env T2 _ U2, !, expand_dx T1 P1 M T2 U2 P2.

% candidate right delta.
check_rhs T1 P1 H1 U1 M T2 P2 :- env T2 H2 U2, !,
                                 check_height T1 P1 H1 U1 M T2 P2 H2 U2.

% forced left delta.
check_rhs T1 P1 _ U1 M T2 P2 :- expand_sn T1 U1 P1 M T2 P2.

% IMPLIED DELTA (COMP) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% age/hight-implied left delta first.
check_height T1 P1 H1 U1 M T2 P2 H2 U2 :- H1 < H2, !,
                                          orelse (expand_sn T1 U1 P1 M T2 P2)
                                                 (expand_dx T1 P1 M T2 U2 P2).
% age/hight-implied right delta first.
check_height T1 P1 _ U1 M T2 P2 _ U2 :- orelse (expand_dx T1 P1 M T2 U2 P2)
                                               (expand_sn T1 U1 P1 M T2 P2).

% FORCED DELTA (WHD*) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

whd* T1 S1 K :- env T1 _ T2, !, expand T1 S1 S2, whd* T2 S2 K.

% INTERFACE WITH ENVIRONMENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% instantiable with environment_matita.elpi

env T H U :- get_expansion T H U.

of T U :- get_type T U, !.
