% test for ECC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

of nat0 (sort 0).
of o0 nat0.
of s0 (app (lam (sort 0) x\ x) (arr nat0 _\ nat0)). % redex

main_ecc :-
  P1 = (lam (sort 1) t\ lam t x\ x),
  of P1 P1T, $print 1 P1T, !,
  P2 = (app (app P1 nat0) (app s0 o0)),
  of P2 P2T, $print 2 P2T, !,
  P3 = (app (app P1 (app (app P1 (sort 0)) nat0)) (app s0 o0)), % redex
  of P3 P3T, $print 3 P3T, !,
  true.

% test for CIC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

of nat1 (sort (s+type u+0)).
of o1 nat1.
of s1 (app (lam (sort (s+type u+0)) x\ x) (arr nat1 _\ nat1)). % redex

main_cic :-
  P1 = (lam (sort (s+type u+1)) t\ lam t x\ x),
  of P1 P1T, $print 1 P1T, !,
  P2 = (app (app P1 nat1) (app s1 o1)),
  of P2 P2T, $print 2 P2T, !,
  P3 = (app (app P1 (app (app P1 (sort (s+type u+0))) nat1)) (app s1 o1)), % redex
  of P3 P3T, $print 3 P3T, !,
  true.
