%% To be accumulated *before* kernel_pts to turn the kernel into a refiner

% vim: set ft=lprolog:
mode (t+step i o).
mode (has+sort i o).
mode (conv+whnf i i i i i).
t+step (?? as K) T :- !, $constraint (t+step K T) K.
has+sort (?? as S) T :- !, $constraint (has+sort S T) S.

conv+whnf A B C D E :- $print "##" (conv+whnf A B C D E), fail.

% Bug1: ci possono essere let-in sulle var in Ti
% Bug2: potrebbe servire un <= se il secondo Ã¨ una sorta
%conv+whnf (?? as T1) [] _M T2 L2 :- !, $llam_unif T1 {zip T2 L2}.
conv+whnf T1 L1 _M (?? as V) L2 :- !, bind-list L2 {zip T1 L1} V.

conv+whnf (?? as T1) L1 M T2 L2 :- !, $constraint (conv+whnf T1 L1 M T2 L2) T1.
conv+whnf T1 L1 M (?? as T2) L2 :- !, $constraint (conv+whnf T1 L1 M T2 L2) T2.

constraint t+step has+sort conv+whnf r+step {
  rule (G1 ?- t+step (?? X1 L1) T1) \ (G2 ?- t+step (?? X2 L2) T2) > X1 ~ X2
   | (compat G1 L1 T1 G2 L2 T2 L3) <=> $print L3, L3.
}

compat G1 [] T1 G2 [] T2 (T1 = T2).
compat G1 [X1|XS1] T1 G2 [X2|XS2] T2 K :-
 foldimpl G1 (t+step X1 U1) H1,
 foldimpl G2 (t+step X2 U2) H2,
 append G1 G2 G12,
 foldimpl G12 (conv+top U1 i+rc U2) H3,
 compat G1 XS1 T1 [r+step X2 X1 _X2|G2] XS2 T2 K2,
 K = (H1, H2, H3, K2).

% Test for unicity of typing:
% (t+step c nat => t+step v (appl vect [nat,c]) => t+step (X c v) nat), (t+step d nat => t+step w (appl vect [nat,appl s [d]]) => t+step (X (appl s [d]) w) T).

foldimpl [] T T.
foldimpl [H|HS] T (H => R) :- foldimpl HS T R.

%%% library
mode (zip i i o).
zip HD [] HD :- !.
zip (appl HD TL) Args (appl HD TLArgs) :- !, append TL Args TLArgs.
zip HD Args (appl HD Args).

is_rigid C :- $is_name C. % ; C = const _ ; C = indt _ ; C = indc _

mode (bind-list i i o).
bind-list [] T T' :- copy T T'.
bind-list [ ?? |VS] T R :- !, pi x\ bind-list VS T (R x).
bind-list [appl C AS | VS] T R :- is_rigid C, !,
  pi x\ (pi L\ copy (app[C|L]) x :- conv+args L AS) => bind-list VS T (R x).
bind-list [C|VS] T R :- is_rigid C, !,
  pi x\ copy C x => bind-list VS T (R x).

mode (copy i o).
copy A B :- $print "AA" (copy A B), fail.
copy X Y :- r+step X Y _. % Bang or not???
copy X Y :- $is_name X, X = Y, !.
copy X Y :- $is_name X, r+step X T _, !, copy T Y.
copy (sort _ as C) C :- !.
copy (appl X1 L1) (appl X2 L2) :- copy X1 X2, $print "UU", map copy L1 L2.

% test:
%  T = (appl (abst (sort u0) x \ F x) [sort W]), t+step T TY, $print T TY.
%  T = (appl (abst nat x \ x) [X]), t+step T TY, $print T TY.

% bad tests: (A non dovrebbe diventare una sort)
% T = (appl (abst A x \ F x) [sort W]), t+step T TY, $print T TY.

