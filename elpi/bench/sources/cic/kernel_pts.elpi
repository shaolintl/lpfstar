accumulate list.

% Extensible type checker for a generic PTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Global reference R      := identifier

% Closed term: T, U, V, W := sort S        sort S
%                         |  prod     W F  product of type W in F
%                         |  abst     W F  abstraction of type W in F
%                         |  abbr   V W F  abbreviation of V of type W in F
%                         |  appl T A      application of T to list A

% Functional term: F      := function of type T => T

% Closed term list: A     := [] | [V|A]  defined by the system

% Stack: P                := []     empty
%                         :  [V|P]  application frame (argument)

% Continuation: C

% Predicates: whd+no+delta T P C     multistep weak head reduct of T after P
%                                    without delta-expansion, passed to continuation C
%             whd+delta+pi T1 P T2   multistep weak head reduction of T1 after P to T2
%                                    with delta-expansion and validating pi-reduction
%             red+whnf T1 P1 T2 P2   reducibility test for generic T1 after P1 to whnf of T2 after P2
%             conv+main T1 T2        convertibility test for generic T1 and T2
%             conv+args P1 P2        convertibility test for generic stacks P1 and P2
%             conv+whnf U1 P1 U2 P2  convertibility test for whnf's U1 after P1 and U2 after P2
%             t+step T U             inference of a type U for T
%           * has+sort T S           test for T having sort S
%             has+checked+type T U   test for T having checked type U
%           * has+type T U           test for T having generic type U

% WEAK HEAD COMPUTATION WITHOUT DELTA-EXPANSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% we delay delta-expansion to possibly avoid it.
% whd+no+delta T P C :- $print (whd+no+delta T P C), fail.

% sigma for abbreviation + theta.
whd+no+delta (abbr V W F) P C :- !, pi x\ r+step x V =>
                                          whd+no+delta (F x) P C.
% beta.
whd+no+delta (abst W F) [V|P] C :- !, whd+no+delta (abbr V W F) P C.

% nu for application.
whd+no+delta (appl T A) P1 C :- !, append A P1 P2,
                                whd+no+delta T P2 C.
% hook for extra reductions.
% whd+no+delta T1 P1 C :- whd+extra T1 P1 T2 P2, !, whd+no+delta T2 P2 C.

% normal form.
whd+no+delta T P C :- C T P.

% WEAK HEAD COMPUTATION WITH PI-REDUCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% aka eat_prods
% whd+delta+pi T1 P T2 :- $print (whd+delta+pi T1 P T2), fail.

% reflexivity.
whd+delta+pi T [] T :- !.

% beta.
whd+delta+pi (abst W F) [V|P] T2 :- !, whd+delta+pi (abbr V W F) P T2.

% nu for application.
whd+delta+pi (appl T1 A) P1 T2 :- !, append A P1 P2,
                                  whd+delta+pi T1 P2 T2.
% validating pi.
whd+delta+pi (prod W F) [V|P] T2 :- !, has+checked+type V W,
                                    whd+delta+pi (abbr V W F) P T2.

% sigma for abbreviation + theta.
whd+delta+pi (abbr V W F1) P (abbr V W F2) :- !, pi x\ r+step x V =>
                                                       whd+delta+pi (F1 x) P (F2 x).
% delta.
whd+delta+pi T1 P T2 :- r+step T1 T, !, whd+delta+pi T P T2.

% hook for extra reductions.
whd+delta+pi T1 P1 T :- whd+extra T1 P1 T2 P2, !, whd+delta+pi T2 P2 T.

% CONVERSION HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% red+whnf T1 P1 U2 P2 :- $print (red+whnf T1 P1 U2 P2), fail.

red+whnf T1 P1 U2 P2 :- whd+no+delta T1 P1 (conv+whnf U2 P2).

%

% conv+main T1 T2 :- $print (conv+main T1 T2), fail.

conv+main T1 T2 :- whd+no+delta T1 [] (red+whnf T2 []).

%

conv+args [] [].

conv+args [V1|P1] [V2|P2] :- conv+args P1 P2, conv+main V1 V2.

% CONVERSION OF WHNF'S %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% conv+whnf T1 P1 T2 P2 :- $print (conv+whnf T1 P1 T2 P2), fail.

% reflexivity.
conv+whnf T P1 T P2 :- conv+args P1 P2, !.

% xi for product.
conv+whnf (prod W1 F1) [] (prod W2 F2) [] :- !, conv+main W1 W2,
                                             pi x\ conv+main (F1 x) (F2 x).
% xi for abstraction.
conv+whnf (abst W1 F1) [] (abst W2 F2) [] :- !, conv+main W1 W2,
                                             pi x\ conv+main (F1 x) (F2 x).
% candidate left delta.
conv+whnf T1 P1 T2 P2 :- r+step T1 V1, !, maybe+sn T1 V1 P1 T2 P2.

% forced right delta.
conv+whnf T1 P1 T2 P2 :- r+step T2 V2, !, red+whnf V2 P2 T1 P1.

maybe+sn T1 V1 P1 T2 P2 :- r+step T2 V2, !, check+age T1 V1 P1 T2 V2 P2.

% forced left delta.
maybe+sn T1 V1 P1 T2 P2 :- red+whnf V1 P1 T2 P2. 

%

% age-implied left delta.
check+age T1 V1 P1 T2 V2 P2 :- $lt T2 T1, !, red+whnf V1 P1 T2 P2.

% age-implied right delta.
check+age T1 V1 P1 T2 V2 P2 :- red+whnf V2 P2 T1 P1.

% VALIDITY + INFERRED TYPE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

print_hyps :- t+step X W, $print "HYP" X W.

print_hyp X :- t+step X W, $print "HYP" X W.

% t+step T U :- $print (t+step T U), fail.

% S.
t+step (sort S1) (sort S2) :- pts+pair S1 S2.

% N.
t+step (appl T1 A) T :- t+step T1 T2, whd+delta+pi T2 A T.

% Sigma.
t+step (abbr V W F1) (abbr V W F2) :- has+type V W,
                                      pi x\ t+step x W => r+step x V =>
                                      t+step (F1 x) (F2 x).
% X for product.
t+step (prod W F) (sort S3) :- has+sort W S1,
                               pi x\ t+step x W => has+sort (F x) S2,
                               pts+triple S1 S2 S3.
% X for abstraction.
t+step (abst W F1) (prod W F2) :- has+sort W S1,
                                  pi x\ t+step x W =>
                                        (t+step (F1 x) (F2 x), has+sort (F2 x) (S x), S x = S2),
                                  pts+triple S1 S2 S3.

% TYPE CHECKING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% has+sort T S :- $print (has+sort T S), fail.

% fast path for T being a sort.
has+sort (sort S1) S :- !, t+step (sort S1) (sort S).

has+sort T S :- t+step T U, red+whnf U [] (sort S) [].

%

% has+checked+type T U :- $print (has+checked+type T U), fail.

% fast path for U being a sort.
has+checked+type T (sort S) :- !, has+sort T S.

has+checked+type T U :- t+step T X, conv+main X U.

%

% has+type T U :- $print (has+type T U), fail.

% fast path for U being a sort.
has+type T (sort S) :- !, has+sort T S.

has+type T U :- has+sort U S, has+checked+type T U.

% KERNEL HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pts+triple S1 S2 S2 :- pts+couple S1 S2, !.
