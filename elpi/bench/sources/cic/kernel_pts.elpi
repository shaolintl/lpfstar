accumulate lambda.
accumulate list.
accumulate logic.

% Type checker for a generic PTS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Level/age/heght: H := integer

% Closed term: T, U, V, W   := sort S        sort S
%                           |  prod     W F  product of type W in F
%                           |  abst     W F  abstraction of type W in F
%                           |  abbr   V W F  abbreviation of V of type W in F
%                           |  appl T A      application of T to list A

% Functional term: F        := function of type T => T

% Closed term list: A, B    := [] | [V|A]  defined by the system

% Stack: P, Q               := []     empty
%                           :  [V|P]  application frame (argument)

% Continuation: C

% Mode: M, N := m+local   delta-expansion: just local
%            :  m+global  delta-expansion: local and global
%            :  m+sn      type inclusion:  lhs may be smaller than rhs
%            :  m+dx      type inclusion:  rhs may be smaller than lhs
%            :  m+rc      type inclusion:  the two sides must be equal

% Predicates: whd+l+delta T P C              multistep weak head reduct of T after P
%                                            with local delta-expansion, passed to continuation C
%             unwind+whd+l+delta T1 P1 T2    multistep weak head reduct of T1 after P1 to T2
%                                            with local delta-expansion
%             unwind+whd+delta+pi T1 P Q T2  multistep weak head reduction of T1 after P and Q to T2
%                                            with delta-expansion and validating pi-reduction
%             unwind+whd+delta T1 P C T2     multistep weak head reduction with delta-expansion,
%                                            of T1 after P passed to relation C returning T2
%             red+whnf T1 P1 M T2 P2         reducibility test for generic T1 after P1 to whnf of T2 after P2
%             conv+top T1 M T2               convertibility test for generic T1 and T2
%             conv+main T1 P1 M T2 P2        convertibility test for generic T1 after P1 and T2 after P2
%             conv+args P1 P2                convertibility test for generic stacks P1 and P2
%             conv+whnf U1 P1 M U2 P2        convertibility test for whnf's U1 after P1 and U2 after P2
%             r+step+h T1 H X T2             transition to T2 from constant T1 with level/age/heght H
%                                            the call-by-need reduction strategy uses X, that reduces to T2 
%             t+step T U                     inference of a type U for T
%           * has+sort T S                   test for T having type (sort S)
%             has+checked+type T U           test for T having checked type U
%           * has+type T U                   test for T having generic type U

% CONSTRUCTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mk+appl T [] T :- !.

mk+appl T A (appl T A) :- !.

% DELTA-EXPANSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

r+step+h T1 H T T2 :- r+step T1 T T2, !, level T1 H.

%

r+step+r T1 P1 T T2 P2 :- r+set+code T T2, r+set+stack T1 P1 P2, !.

%

r+set+code T T2 :- is_flex T2, !, unwind+whd+l+delta T [] T2.

r+set+code _T _T2 :- /* _T = _T2, */ !.

%

r+set+stack _ P1 P1 :- !.

%

r+unwind T1 _T2 T1 :- /* is_flex _T2, */ !.

% r+unwind T1 T2 T2 :- !.

% BASIC WEAK HEAD REDUCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% beta
whd+basic (abst W F) [V|P] M (abbr V W F) P :- !
%                                            , if on+focus ($print beta)
                                               .
% nu for application.
whd+basic (appl T A) P1 M T P2 :- !, append A P1 P2
%                               , if on+focus ($print nu)
                                  .
% local delta.
whd+basic T1 P1 m+local T2 P2 :- r+step+h T1 H X T2, 0 < H, !,
                                 r+step+r T1 P1 X T2 P2.
% local + global delta.
whd+basic T1 P1 m+global T2 P2 :- r+step+h T1 _ X T2, !,
                                  r+step+r T1 P1 X T2 P2.

% WEAK HEAD COMPUTATION WITH LOCAL DELTA-EXPANSION %%%%%%%%%%%%%%%%%%%%%%%%%%%

% we delay global delta-expansion to possibly avoid it.

% normal form for meta-variables.
whd+l+delta T P C :- is_flex T, !, C T P.

% basic reductions.
whd+l+delta T1 P1 C :- whd+basic T1 P1 m+local T2 P2, !, whd+l+delta T2 P2 C.

% sigma for abbreviation + theta.
whd+l+delta (abbr V _W F) P C :- !, pi x\ r+step x V _X =>
%                                         if on+focus ($print theta),
                                          whd+l+delta (F x) P C.
% normal form.
whd+l+delta T P C :- C T P, !.

% WEAK HEAD COMPUTATION WITH LOCAL DELTA EXPANSION + UNWIND %%%%%%%%%%%%%%%%%%

% basic reductions.
unwind+whd+l+delta T1 P1 T :- whd+basic T1 P1 m+local T2 P2, !, unwind+whd+l+delta T2 P2 T.

% sigma for abbreviation + theta + zeta.
unwind+whd+l+delta (abbr V1 W F1) P1 Y :- !, pi x\ r+step x V1 X => (
%                                                  if on+focus ($print theta),
                                                   unwind+whd+l+delta (F1 x) P1 (F2 x),
                                                   orelse (F2 x = Y) (r+unwind V1 X V2, abbr V2 W F2 = Y)
                                             ).
% normal form
unwind+whd+l+delta T1 P1 T2 :- !, mk+appl T1 P1 T2.

% WEAK HEAD COMPUTATION WITH DELTA EXPANSION AND PI-REDUCTION + UNWIND %%%%%%%
% - aka eat_prods
% - the staks P and Q resamble respectively the registers Yellow and White
%   of de Bruijn validation machine for Delta-Lambda

% reflexivity.
unwind+whd+delta+pi T [] [] T :- !.

% basic reductions.
unwind+whd+delta+pi T1 P1 Q T :- whd+basic T1 P1 m+global T2 P2, !, unwind+whd+delta+pi T2 P2 Q T.

% validating pi.
unwind+whd+delta+pi (prod W F) [] [V|Q] T2 :- !, has+checked+type V W,
                                              unwind+whd+delta+pi (abbr V W F) [] Q T2.

% sigma for abbreviation + theta + zeta.
unwind+whd+delta+pi (abbr V1 W F1) P Q Y :- !, pi x\ r+step x V1 X => (
%                                                    if on+focus ($print theta),
                                                     unwind+whd+delta+pi (F1 x) P Q (F2 x),
                                                     orelse (F2 x = Y) (r+unwind V1 X V2, abbr V2 W F2 = Y)
                                               ).

% WEAK HEAD COMPUTATION WITH DELTA EXPANSION + UNWIND %%%%%%%%%%%%%%%%%%%%%%%%

% basic reductions.
unwind+whd+delta T1 P1 C T :- whd+basic T1 P1 m+global T2 P2, !, unwind+whd+delta T2 P2 C T.

% sigma for abbreviation + theta + zeta.
unwind+whd+delta (abbr V1 W F1) P C Y :- !, pi x\ r+step x V1 X => (
%                                                 if on+focus ($print theta),
                                                  unwind+whd+delta (F1 x) P C (F2 x),
                                                  orelse (F2 x = Y) (r+unwind V1 X V2, abbr V2 W F2 = Y)
                                            ).
% normal form
unwind+whd+delta T1 P1 C T :- C T1 P1 T2 P2, !, mk+appl T2 P2 T.

% CONVERSION HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

m+not m+sn m+dx.

m+not m+dx m+sn.

m+not m+rc m+rc.

%

red+whnf T1 P1 M U2 P2 :- whd+l+delta T1 P1 (conv+whnf U2 P2 M), !.

%

conv+top T1 M T2 :- conv+main T1 [] M T2 [], !.

conv+main T1 P1 M T2 P2 :- whd+l+delta T1 P1 (red+whnf T2 P2 M), !.

%

conv+arg V1 V2 :- conv+top V1 m+rc V2.

conv+args P1 P2 :- rev_map conv+arg P1 P2, !.

% CONVERSION OF WHNF'S %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% left subsumption for sort
conv+whnf (sort S1) [] m+sn (sort S2) [] :- !, pts+sub S1 S2.

% right subsumption for sort
conv+whnf (sort S1) [] m+dx (sort S2) [] :- !, pts+sub S2 S1.

% reflexivity: fast path for alpha-convertible stacks
conv+whnf T P _M T P :- ! /* , if on+focus ($print reflexivity) */.

% reflexivity: generl case.
conv+whnf T P1 _M T P2 :- conv+args P1 P2, !.

% xi for product.
conv+whnf (prod W1 F1) [] M (prod W2 F2) [] :- !, conv+top W1 m+rc W2,
                                               pi x\ conv+top (F1 x) M (F2 x).
% xi for abstraction.
conv+whnf (abst W1 F1) [] _M (abst W2 F2) [] :- !, conv+top W1 m+rc W2,
                                                pi x\ conv+top (F1 x) m+rc (F2 x).
% parallel delta
conv+whnf T P1 M T P2 :- r+step+h T _ X V, !,
                         r+step+r T P1 X U1 Q1, r+step+r T P2 X U2 Q2,
%                        if on+focus ($print parallel-delta),
                         conv+main U1 Q1 M U2 Q2.
% candidate left delta.
conv+whnf T1 P1 M T2 P2 :- r+step+h T1 H1 X1 V1, !, maybe+sn T1 P1 H1 X1 V1 M T2 P2.

% forced right delta.
conv+whnf T1 P1 M T2 P2 :- r+step+h T2 _ X V, !,
                           r+step+r T2 P2 X V P, red+whnf V P M T1 P1.

% AGE/HEIGHT-CONTROLLED DELTA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

maybe+sn T1 P1 H1 X1 V1 M T2 P2 :- r+step+h T2 H2 X2 V2, !, check+h T1 P1 H1 X1 V1 M T2 P2 H2 X2 V2.

% forced left delta.
maybe+sn T1 P1 _ X V M T2 P2 :- m+not M N, r+step+r T1 P1 X V P, red+whnf V P N T2 P2.

%

% age/hight-implied left delta.
check+h T1 P1 H1 X V M T2 P2 H2 _ _ :- lt+h H2 H1, !,
                                       m+not M N, r+step+r T1 P1 X V P, red+whnf V P N T2 P2.

% age/hight-implied right delta.
check+h T1 P1 _ _ _ M T2 P2 _ X V :- r+step+r T2 P2 X V P, red+whnf V P M T1 P1.

% VALIDITY + INFERRED TYPE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% S.
t+step (sort S1) (sort S2) :- !, pts+pair S1 S2.

% N.
t+step (appl T1 A) T :- !, t+step T1 T2, unwind+whd+delta+pi T2 [] A T.

% Sigma.
t+step (abbr V W F1) (abbr V W F2) :- !, has+type V W,
                                      pi x\ t+step x W => r+step x V _X =>
                                      t+step (F1 x) (F2 x).
% X for product.
t+step (prod W F) (sort S3) :- !, has+sort W S1,
                               pi x\ t+step x W => has+sort (F x) S2,
                               pts+triple S1 S2 S3.
% X for abstraction.
t+step (abst W F1) (prod W F2) :- !, has+sort W _S1,
                                  pi x\ t+step x W =>
                                        (t+step (F1 x) (F2 x))
%, has+sort (F2 x) S2, pts+triple S1 S2 S3),
                                  .

% TYPE CHECKING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% fast path for T being a sort.
has+sort (sort S1) S2 :- t+step (sort S1) (sort S2), !.

% fast path for T being a subsumed sort.
has+sort (sort S1) S2 :- !, t+step (sort S1) (sort S), pts+sub S S2.

has+sort T S :- t+step T U, red+whnf U [] m+dx (sort S) [].

%

% fast path for U being a sort.
has+checked+type T (sort S) :- !, has+sort T S.

has+checked+type T U :- t+step T X,
%                       if on+focus ($print conversion),
                        conv+top X m+sn U, !.
%

% fast path for U being a sort.
has+type T (sort S) :- !, has+sort T S.

% was: has+sort U S
has+type T U :- t+step U _S, has+checked+type T U, !.

% KERNEL HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pts+triple S1 S2 S2 :- pts+couple S1 S2, !.
