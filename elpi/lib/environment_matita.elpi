% Interface with Matita ITP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Custom predicates defined by NCicELPI.ml

type get_inductive term -> int -> list term -> prop.
get_inductive T K TS :- $get_inductive T K TS. % if T is an iductive type,
                                               % K is the number of its left parameters,
                                               % TS is the list of its constructors;
                                               % false otherwise

type get_constructor term -> int -> int -> prop.
get_constructor T J K :- $get_constructor T J K. % if T is a constructor,
                                                 % J is its position in the constructors list (0 based),
                                                 % K is the number of its left parameters;
                                                 % false otherwise

type get_fixpoint term -> int -> prop.
get_fixpoint T L :- $get_fixpoint T L. % if T is a fixpoint,
                                       % L is the number of its recursive argument (0 based);
                                       % false otherwise

type get_expansion term -> int -> term -> prop.
get_expansion T1 H T2 :- $get_expansion T1 H T2. % if T1 is a delta-expandable reference,
                                                 % H is its opposed height (i.e. H < 0),
                                                 % T2 is its delta-expansion;
                                                 % false otherwise

type get_type term -> term -> prop.
get_type T U :- $get_type T U. % if T is a global reference,
                               % U is its inferred type;
                               % false otherwise

type on_object term -> prop.
on_object X :- $on_object X. % true if we are checking object X,
                             % X must be a constant produced by NReference.string_of_reference;
                             % false otherwise

% Queries issued by NCicELPI.ml

/* has_type T U: T has expected type U */
type has_type term -> term -> prop.

/* is_type U: U is a type */
type is_type term -> prop.
